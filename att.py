# deletar_usuarios.py
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import Usuario

def menu_principal():
    while True:
        print("\n" + "="*50)
        print("üéØ GERENCIADOR DE USU√ÅRIOS")
        print("="*50)
        print("1. Listar todos os usu√°rios")
        print("2. Deletar usu√°rio por ID")
        print("3. Deletar usu√°rio por email")
        print("4. Deletar todos os usu√°rios de um tipo")
        print("5. Sair")
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        with app.app_context():
            if opcao == '1':
                listar_usuarios()
            elif opcao == '2':
                usuario_id = input("Digite o ID do usu√°rio: ").strip()
                if usuario_id.isdigit():
                    deletar_usuario(int(usuario_id))
                else:
                    print("‚ùå ID inv√°lido")
            elif opcao == '3':
                email = input("Digite o email do usu√°rio: ").strip()
                deletar_por_email(email)
            elif opcao == '4':
                tipo = input("Digite o tipo (usuario/profissional/admin): ").strip()
                deletar_por_tipo(tipo)
            elif opcao == '5':
                print("üëã Saindo...")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida")

def listar_usuarios():
    usuarios = Usuario.query.all()
    print("\nüìã LISTA DE USU√ÅRIOS:")
    print("-" * 80)
    for usuario in usuarios:
        print(f"ID: {usuario.id:2d} | Nome: {usuario.nome:20s} | Email: {usuario.email:25s} | Tipo: {usuario.tipo:12s}")
    print(f"\nTotal: {len(usuarios)} usu√°rios")

def deletar_usuario(usuario_id):
    usuario = Usuario.query.get(usuario_id)
    if not usuario:
        print(f"‚ùå Usu√°rio ID {usuario_id} n√£o encontrado")
        return
    
    confirmar = input(f"üóëÔ∏è  Confirmar dele√ß√£o de '{usuario.nome}' (email: {usuario.email})? (s/N): ")
    if confirmar.lower() == 's':
        try:
            db.session.delete(usuario)
            db.session.commit()
            print("‚úÖ Usu√°rio deletado com sucesso!")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro: {e}")

def deletar_por_email(email):
    usuario = Usuario.query.filter_by(email=email).first()
    if not usuario:
        print(f"‚ùå Usu√°rio com email '{email}' n√£o encontrado")
        return
    deletar_usuario(usuario.id)

def deletar_por_tipo(tipo):
    usuarios = Usuario.query.filter_by(tipo=tipo).all()
    if not usuarios:
        print(f"‚ùå Nenhum usu√°rio do tipo '{tipo}' encontrado")
        return
    
    print(f"\n‚ö†Ô∏è  Encontrados {len(usuarios)} usu√°rios do tipo '{tipo}':")
    for u in usuarios:
        print(f"   - {u.nome} (ID: {u.id}, Email: {u.email})")
    
    confirmar = input(f"\nüóëÔ∏è  Confirmar dele√ß√£o de TODOS estes {len(usuarios)} usu√°rios? (s/N): ")
    if confirmar.lower() == 's':
        try:
            for usuario in usuarios:
                db.session.delete(usuario)
            db.session.commit()
            print(f"‚úÖ {len(usuarios)} usu√°rios deletados com sucesso!")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    menu_principal()